<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models;

use stdClass;

class V1ElementsTransactionIntentionRequest implements \JsonSerializable
{
    /**
     * @var array
     */
    private $action = ['value' => ActionEnum::SALE];

    /**
     * @var Method[]|null
     */
    private $methods;

    /**
     * @var int|null
     */
    private $amount;

    /**
     * @var int|null
     */
    private $taxAmount;

    /**
     * @var array
     */
    private $locationId = [];

    /**
     * @var array
     */
    private $contactId = [];

    /**
     * @var bool|null
     */
    private $saveAccount;

    /**
     * @var array
     */
    private $achSecCode = ['value' => AchSecCodeEnum::WEB];

    /**
     * Returns Action.
     * The action to be performed
     */
    public function getAction(): ?string
    {
        if (count($this->action) == 0) {
            return null;
        }
        return $this->action['value'];
    }

    /**
     * Sets Action.
     * The action to be performed
     *
     * @maps action
     * @factory \FortisAPILib\Models\ActionEnum::checkValue
     */
    public function setAction(?string $action): void
    {
        $this->action['value'] = $action;
    }

    /**
     * Unsets Action.
     * The action to be performed
     */
    public function unsetAction(): void
    {
        $this->action = [];
    }

    /**
     * Returns Methods.
     * Byt default the system will try to offer all the availables payment methods from your account. But
     * if you like, you can specify exactly what services you want to use.
     *
     * @return Method[]|null
     */
    public function getMethods(): ?array
    {
        return $this->methods;
    }

    /**
     * Sets Methods.
     * Byt default the system will try to offer all the availables payment methods from your account. But
     * if you like, you can specify exactly what services you want to use.
     *
     * @maps methods
     *
     * @param Method[]|null $methods
     */
    public function setMethods(?array $methods): void
    {
        $this->methods = $methods;
    }

    /**
     * Returns Amount.
     * The total amount to be charged. Allowed on the actions: `sale`, `auth-only`, `refund`
     */
    public function getAmount(): ?int
    {
        return $this->amount;
    }

    /**
     * Sets Amount.
     * The total amount to be charged. Allowed on the actions: `sale`, `auth-only`, `refund`
     *
     * @maps amount
     */
    public function setAmount(?int $amount): void
    {
        $this->amount = $amount;
    }

    /**
     * Returns Tax Amount.
     * Amount of Sales Tax. If supplied, this amount should be already included in the transaction amount.
     * Allowed on the actions: `sale`, `auth-only`, `refund`
     */
    public function getTaxAmount(): ?int
    {
        return $this->taxAmount;
    }

    /**
     * Sets Tax Amount.
     * Amount of Sales Tax. If supplied, this amount should be already included in the transaction amount.
     * Allowed on the actions: `sale`, `auth-only`, `refund`
     *
     * @maps tax_amount
     */
    public function setTaxAmount(?int $taxAmount): void
    {
        $this->taxAmount = $taxAmount;
    }

    /**
     * Returns Location Id.
     * Location ID
     */
    public function getLocationId(): ?string
    {
        if (count($this->locationId) == 0) {
            return null;
        }
        return $this->locationId['value'];
    }

    /**
     * Sets Location Id.
     * Location ID
     *
     * @maps location_id
     */
    public function setLocationId(?string $locationId): void
    {
        $this->locationId['value'] = $locationId;
    }

    /**
     * Unsets Location Id.
     * Location ID
     */
    public function unsetLocationId(): void
    {
        $this->locationId = [];
    }

    /**
     * Returns Contact Id.
     * Contact ID
     */
    public function getContactId(): ?string
    {
        if (count($this->contactId) == 0) {
            return null;
        }
        return $this->contactId['value'];
    }

    /**
     * Sets Contact Id.
     * Contact ID
     *
     * @maps contact_id
     */
    public function setContactId(?string $contactId): void
    {
        $this->contactId['value'] = $contactId;
    }

    /**
     * Unsets Contact Id.
     * Contact ID
     */
    public function unsetContactId(): void
    {
        $this->contactId = [];
    }

    /**
     * Returns Save Account.
     * Specifies to tokenize card/bank information within the transaction. Allowed on the actions: `sale`,
     * `auth-only`, `avs-only`, `refund`
     */
    public function getSaveAccount(): ?bool
    {
        return $this->saveAccount;
    }

    /**
     * Sets Save Account.
     * Specifies to tokenize card/bank information within the transaction. Allowed on the actions: `sale`,
     * `auth-only`, `avs-only`, `refund`
     *
     * @maps save_account
     */
    public function setSaveAccount(?bool $saveAccount): void
    {
        $this->saveAccount = $saveAccount;
    }

    /**
     * Returns Ach Sec Code.
     * SEC code for the transaction if it's an ACH transaction
     */
    public function getAchSecCode(): ?string
    {
        if (count($this->achSecCode) == 0) {
            return null;
        }
        return $this->achSecCode['value'];
    }

    /**
     * Sets Ach Sec Code.
     * SEC code for the transaction if it's an ACH transaction
     *
     * @maps ach_sec_code
     * @factory \FortisAPILib\Models\AchSecCodeEnum::checkValue
     */
    public function setAchSecCode(?string $achSecCode): void
    {
        $this->achSecCode['value'] = $achSecCode;
    }

    /**
     * Unsets Ach Sec Code.
     * SEC code for the transaction if it's an ACH transaction
     */
    public function unsetAchSecCode(): void
    {
        $this->achSecCode = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->action)) {
            $json['action']       = ActionEnum::checkValue($this->action['value']);
        }
        if (isset($this->methods)) {
            $json['methods']      = $this->methods;
        }
        if (isset($this->amount)) {
            $json['amount']       = $this->amount;
        }
        if (isset($this->taxAmount)) {
            $json['tax_amount']   = $this->taxAmount;
        }
        if (!empty($this->locationId)) {
            $json['location_id']  = $this->locationId['value'];
        }
        if (!empty($this->contactId)) {
            $json['contact_id']   = $this->contactId['value'];
        }
        if (isset($this->saveAccount)) {
            $json['save_account'] = $this->saveAccount;
        }
        if (!empty($this->achSecCode)) {
            $json['ach_sec_code'] = AchSecCodeEnum::checkValue($this->achSecCode['value']);
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
